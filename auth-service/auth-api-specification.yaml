openapi: 3.1.0
info:
  title: Smarter Firms Authentication API
  description: |
    API specification for the Smarter Firms Authentication Service.
    This document defines all authentication endpoints, security requirements, and data models.
  version: 1.0.0
  contact:
    name: Smarter Firms Auth Team
    email: auth-team@smarterfirms.com

servers:
  - url: https://auth.smarterfirms.com/api/v1
    description: Production server
  - url: https://auth-staging.smarterfirms.com/api/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Local development server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Registration
    description: User registration and account creation
  - name: Profile
    description: User profile management
  - name: Password
    description: Password management operations
  - name: Two-Factor
    description: Two-factor authentication management
  - name: OAuth
    description: OAuth integration with Clio
  - name: Token
    description: Token validation and management
  - name: Consultant
    description: Consultant-specific operations

paths:
  /auth/register:
    post:
      tags:
        - Registration
      summary: Register a new user
      description: |
        Creates a new user account with email/password authentication.
        For consultant accounts, additional verification steps are required.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security: []
      x-rate-limit:
        rate: 10
        per: hour
        by: ip

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate with email and password
      description: |
        Authenticates a user with email and password.
        If 2FA is enabled, a session token will be returned instead of authentication tokens.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AuthResponse'
                  - $ref: '#/components/schemas/TwoFactorRequiredResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security: []
      x-rate-limit:
        rate: 5
        per: minute
        by: account
        and:
          rate: 20
          per: hour
          by: ip

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh authentication tokens
      description: |
        Refreshes an expired access token using a valid refresh token.
        IP binding validation is performed based on subnet (/24).
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security: []
      x-rate-limit:
        rate: 10
        per: hour
        by: user

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Invalidate authentication tokens
      description: |
        Invalidates the current session or all sessions for a user.
        If refreshToken is provided, only that specific token is invalidated.
        If no refreshToken is provided, all sessions for the user are invalidated.
      operationId: logoutUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []

  /auth/verify-email:
    post:
      tags:
        - Registration
      summary: Verify email address
      description: |
        Verifies a user's email address using a verification token.
        This endpoint is rate limited to prevent brute force attacks.
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '410':
          $ref: '#/components/responses/TokenExpired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security: []
      x-rate-limit:
        rate: 5
        per: token

  /auth/resend-verification:
    post:
      tags:
        - Registration
      summary: Resend email verification
      description: Resends the email verification link to the user's email.
      operationId: resendVerification
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security:
        - bearerAuth: []
      x-rate-limit:
        rate: 3
        per: hour
        by: user

  /auth/forgot-password:
    post:
      tags:
        - Password
      summary: Request password reset
      description: |
        Sends a password reset link to the user's email.
        Returns success regardless of whether the email exists for security reasons.
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent (if email exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security: []
      x-rate-limit:
        rate: 3
        per: hour
        by: email

  /auth/reset-password:
    post:
      tags:
        - Password
      summary: Reset password with token
      description: |
        Resets a user's password using a reset token.
        This endpoint is rate limited to prevent brute force attacks.
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '410':
          $ref: '#/components/responses/TokenExpired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security: []
      x-rate-limit:
        rate: 5
        per: token

  /auth/change-password:
    post:
      tags:
        - Password
      summary: Change password when authenticated
      description: |
        Changes a user's password when they are already authenticated.
        Password history is checked to prevent reuse of recent passwords.
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []

  /auth/2fa/setup:
    post:
      tags:
        - Two-Factor
      summary: Initialize 2FA setup
      description: |
        Initializes the setup of two-factor authentication.
        For APP method, returns a secret and QR code.
        For SMS method, verifies the phone number first.
      operationId: setupTwoFactor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorSetupRequest'
      responses:
        '200':
          description: 2FA setup initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFactorSetupResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []

  /auth/2fa/verify:
    post:
      tags:
        - Two-Factor
      summary: Verify and activate 2FA
      description: |
        Verifies the setup of two-factor authentication and activates it.
        Returns recovery codes that the user should save securely.
      operationId: verifyTwoFactor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorVerifyRequest'
      responses:
        '200':
          description: 2FA activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFactorVerifyResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []

  /auth/2fa/challenge:
    post:
      tags:
        - Two-Factor
      summary: Complete 2FA challenge during login
      description: |
        Completes the two-factor authentication challenge during login.
        Uses the session token from the login response.
      operationId: challengeTwoFactor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorChallengeRequest'
      responses:
        '200':
          description: 2FA challenge completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security: []

  /auth/2fa:
    delete:
      tags:
        - Two-Factor
      summary: Disable 2FA
      description: |
        Disables two-factor authentication for the user.
        Not available for consultant accounts where 2FA is mandatory.
      operationId: disableTwoFactor
      responses:
        '200':
          description: 2FA disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []

  /auth/clio/url:
    get:
      tags:
        - OAuth
      summary: Get Clio OAuth URL
      description: |
        Generates a URL for the Clio OAuth flow with PKCE.
        Includes code_challenge, state parameter for CSRF protection.
      operationId: getClioAuthUrl
      responses:
        '200':
          description: Clio OAuth URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClioAuthUrlResponse'
      security: []

  /auth/clio/callback:
    get:
      tags:
        - OAuth
      summary: Handle Clio OAuth callback
      description: |
        Handles the callback from Clio OAuth. 
        Verifies the state parameter and code_verifier.
        Redirects to frontend with tokens in URL fragment.
      operationId: handleClioCallback
      parameters:
        - name: code
          in: query
          description: Authorization code from Clio
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: State parameter for CSRF protection
          required: true
          schema:
            type: string
        - name: code_verifier
          in: query
          description: PKCE code verifier to exchange with code challenge
          required: true
          schema:
            type: string
            minLength: 43
            maxLength: 128
      responses:
        '302':
          description: Redirect to frontend with tokens
          headers:
            Location:
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/ValidationError'
      security: []

  /auth/link-account:
    post:
      tags:
        - Profile
      summary: Link external auth provider to existing account
      description: |
        Links an external authentication provider to an existing account.
        Currently supports linking Clio accounts.
      operationId: linkAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkAccountRequest'
      responses:
        '200':
          description: Account linked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkAccountResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []

  /auth/consultant-profile:
    post:
      tags:
        - Consultant
      summary: Create consultant profile
      description: |
        Creates a consultant profile for a user.
        Only available for users with the consultant role.
      operationId: createConsultantProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsultantProfileRequest'
      responses:
        '201':
          description: Consultant profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultantProfileResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []

    put:
      tags:
        - Consultant
      summary: Update consultant profile
      description: |
        Updates a consultant profile.
        Only available for users with the consultant role.
      operationId: updateConsultantProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsultantProfileRequest'
      responses:
        '200':
          description: Consultant profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultantProfileResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []

  /auth/validate-token:
    get:
      tags:
        - Token
      summary: Validate access token
      description: |
        Validates an access token and returns the decoded payload.
        Used by other services to validate tokens.
      operationId: validateToken
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []

  /auth/.well-known/jwks.json:
    get:
      tags:
        - Token
      summary: Get JWKS
      description: |
        Returns the JSON Web Key Set (JWKS) for token verification.
        Keys are rotated every 30 days, so this endpoint may return multiple keys.
      operationId: getJwks
      responses:
        '200':
          description: JWKS returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwksResponse'
      security: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from login or refresh endpoints.
        Token must be included in the Authorization header as "Bearer {token}".

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - userType
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 12
          example: SecurePassword123!
          description: |
            Password must be at least 12 characters and include uppercase, lowercase, 
            number, and special character.
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        userType:
          type: string
          enum:
            - LAW_FIRM_USER
            - CONSULTANT
          example: LAW_FIRM_USER
        organization:
          type: string
          example: Law Firm Inc.
        referralCode:
          type: string
          example: ABC123

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: SecurePassword123!

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...

    LogoutRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
          description: |
            If provided, only this specific token will be invalidated.
            If not provided, all tokens for the user will be invalidated.

    VerifyEmailRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: verification_token_123

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: user@example.com

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          example: reset_token_123
        newPassword:
          type: string
          format: password
          minLength: 12
          example: NewSecurePassword123!
          description: |
            Password must be at least 12 characters and include uppercase, lowercase, 
            number, and special character.

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          format: password
          example: CurrentPassword123!
        newPassword:
          type: string
          format: password
          minLength: 12
          example: NewSecurePassword123!
          description: |
            Password must be at least 12 characters and include uppercase, lowercase, 
            number, and special character.

    TwoFactorSetupRequest:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          enum:
            - APP
            - SMS
          example: APP
        phoneNumber:
          type: string
          example: '+15551234567'
          description: Required only for SMS method

    TwoFactorVerifyRequest:
      type: object
      required:
        - code
        - method
      properties:
        code:
          type: string
          minLength: 6
          maxLength: 6
          example: '123456'
        method:
          type: string
          enum:
            - APP
            - SMS
          example: APP

    TwoFactorChallengeRequest:
      type: object
      required:
        - sessionToken
        - code
      properties:
        sessionToken:
          type: string
          example: temporary_session_token_123
        code:
          type: string
          minLength: 6
          maxLength: 6
          example: '123456'

    LinkAccountRequest:
      type: object
      required:
        - provider
        - authCode
      properties:
        provider:
          type: string
          enum:
            - CLIO
          example: CLIO
        authCode:
          type: string
          example: authorization_code_123
        codeVerifier:
          type: string
          minLength: 43
          maxLength: 128
          example: code_verifier_123
          description: PKCE code verifier for OAuth flows

    ConsultantProfileRequest:
      type: object
      required:
        - specialty
        - bio
      properties:
        specialty:
          type: string
          example: Legal Technology
        bio:
          type: string
          minLength: 10
          example: Expert in legal tech solutions
        publicProfile:
          type: boolean
          example: true

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: user_uuid
        email:
          type: string
          format: email
          example: user@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        userType:
          type: string
          enum:
            - LAW_FIRM_USER
            - CONSULTANT
          example: LAW_FIRM_USER
        organization:
          type: string
          example: Law Firm Inc.
        isEmailVerified:
          type: boolean
          example: true
        twoFactorEnabled:
          type: boolean
          example: false
        hasClioConnection:
          type: boolean
          example: true

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn:
          type: integer
          example: 3600
          description: Token expiration time in seconds

    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/UserResponse'
            tokens:
              $ref: '#/components/schemas/TokenResponse'

    TwoFactorRequiredResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            sessionToken:
              type: string
              example: temporary_session_token_123
            requires2FA:
              type: boolean
              example: true

    TwoFactorSetupResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            secret:
              type: string
              example: OTP_SECRET
            qrCode:
              type: string
              format: uri
              example: data:image/png;base64,...

    TwoFactorVerifyResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            enabled:
              type: boolean
              example: true
            recoveryCodes:
              type: array
              items:
                type: string
              example:
                - code1
                - code2
                - code3

    ClioAuthUrlResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            authUrl:
              type: string
              format: uri
              example: https://account.clio.com/oauth2/auth?response_type=code&client_id={client_id}&redirect_uri={callback_uri}&scope=openid&state={csrf_token}&code_challenge={code_challenge}&code_challenge_method=S256
            codeVerifier:
              type: string
              example: code_verifier_123
              description: |
                PKCE code verifier that should be stored in the client and sent 
                back with the authorization code.

    LinkAccountResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            message:
              type: string
              example: Account linked successfully
            authMethods:
              type: array
              items:
                type: string
              example:
                - LOCAL
                - CLIO

    ConsultantProfileResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            profile:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  example: profile_uuid
                userId:
                  type: string
                  format: uuid
                  example: user_uuid
                specialty:
                  type: string
                  example: Legal Technology
                bio:
                  type: string
                  example: Expert in legal tech solutions
                publicProfile:
                  type: boolean
                  example: true
                profileImage:
                  type: string
                  format: uri
                  nullable: true
                createdAt:
                  type: string
                  format: date-time
                  example: '2023-06-01T00:00:00Z'
                updatedAt:
                  type: string
                  format: date-time
                  example: '2023-06-01T00:00:00Z'

    TokenValidationResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            valid:
              type: boolean
              example: true
            payload:
              type: object
              properties:
                sub:
                  type: string
                  format: uuid
                  example: user_uuid
                email:
                  type: string
                  format: email
                  example: user@example.com
                userType:
                  type: string
                  example: LAW_FIRM_USER
                roles:
                  type: array
                  items:
                    type: string
                  example:
                    - user
                permissions:
                  type: array
                  items:
                    type: string
                  example:
                    - read:matters
                    - write:documents

    JwksResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
                example: RSA
              use:
                type: string
                example: sig
              kid:
                type: string
                example: key-id-1
              alg:
                type: string
                example: RS256
              n:
                type: string
                example: key-modulus
              e:
                type: string
                example: AQAB

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
          example: success
        data:
          type: object
          properties:
            message:
              type: string
              example: Operation completed successfully

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
          example: error
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Validation failed
        details:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                example: email
              message:
                type: string
                example: Invalid email format

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  code:
                    example: UNAUTHORIZED
                  message:
                    example: Authentication required

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  code:
                    example: FORBIDDEN
                  message:
                    example: Not permitted to access this resource

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  code:
                    example: NOT_FOUND
                  message:
                    example: Resource not found

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  code:
                    example: CONFLICT
                  message:
                    example: Resource already exists

    TokenExpired:
      description: Token expired
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  code:
                    example: TOKEN_EXPIRED
                  message:
                    example: Token has expired

    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  code:
                    example: TOO_MANY_REQUESTS
                  message:
                    example: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: The number of allowed requests in the current period
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: The number of remaining requests in the current period
        X-RateLimit-Reset:
          schema:
            type: integer
            format: unix-time
          description: The time at which the current rate limit window resets

x-jwt-config:
  access-token:
    algorithm: RS256
    key-length: 2048
    rotation-frequency: 30d
    header:
      alg: RS256
      typ: JWT
      kid: <key-identifier>
    claims:
      iss: auth.smarterfirms.com
      sub: <user-id>
      aud: api.smarterfirms.com
      exp: <now + 3600>
      iat: <now>
      jti: <uuid-v4>
      type: access
      name: <user-full-name>
      email: <user-email>
      userType: <LAW_FIRM_USER|CONSULTANT>
      firmId: <firm-id>
      roles: <array-of-roles>
      permissions: <array-of-permissions>
      authMethod: <LOCAL|CLIO>
      verified: <is-email-verified>
      securityLevel: <integer>
    refresh-behavior:
      threshold: 75%
      automatic: true
    validation:
      silent: true
      on-each-request: true

  refresh-token:
    algorithm: RS256
    key-length: 2048
    rotation-frequency: 30d
    header:
      alg: RS256
      typ: JWT
      kid: <key-identifier>
    claims:
      iss: auth.smarterfirms.com
      sub: <user-id>
      aud: auth.smarterfirms.com
      exp: <now + 2592000>
      iat: <now>
      jti: <uuid-v4>
      type: refresh
      family: <token-family-id>
      version: <token-version>
    ip-binding:
      type: subnet
      subnet-mask: /24
      verification-levels:
        same-subnet: none
        different-subnet: additional-verification
        different-region: full-reauthentication
    rate-limiting:
      max-refreshes: 10
      per-time-period: 1h
      per-user: true

x-pkce-config:
  code-challenge-methods:
    - S256
  code-verifier:
    min-length: 43
    max-length: 128
    encoding: url-safe-base64
    charset: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~

x-key-rotation:
  scheduled-period: 30d
  emergency-support: true
  active-keys: 2
  jwks-endpoint: /auth/.well-known/jwks.json
  strategy: key-identifier
  kid-generation: sha256-truncated

x-security-requirements:
  password-hashing:
    algorithm: argon2id
    parameters:
      memory-cost: 65536
      time-cost: 3
      parallelism: 4
    salt-length: 16
  password-requirements:
    min-length: 12
    require-uppercase: true
    require-lowercase: true
    require-number: true
    require-special: true
    prevent-reuse: 10
    max-age-days: 90
  account-lockout:
    max-attempts: 5
    lockout-time-minutes: 10
  consultant-security:
    require-2fa: true
    periodic-password-change: true
    ip-tracking: true
    session-timeout-minutes: 30
  rate-limiting:
    enabled: true
    default:
      rate: 100
      per: minute
    login:
      rate: 5
      per: minute
      by-account: true
    registration:
      rate: 10
      per: hour
      by-ip: true 